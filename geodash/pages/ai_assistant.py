# geodash/pages/ai_assistant.py - UPDATED for bilingual support
"""
AI Assistant page - Bilingual RAG-enabled chatbot (Thai/English).
"""
from typing import Dict
import streamlit as st
import requests

from geodash.services.knowledge_base_rag import (
    KnowledgeBaseManager,
    BilingualRAGChatbot,
    KnowledgeBaseUI,
)


def validate_openrouter_key(api_key: str) -> tuple[bool, str]:
    """Validate OpenRouter API key."""
    try:
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        }
        
        test_payload = {
            "model": "anthropic/claude-3.5-haiku",
            "messages": [{"role": "user", "content": "test"}],
            "max_tokens": 10
        }
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=test_payload,
            timeout=10
        )
        
        if response.status_code == 200:
            return True, "‚úÖ API key validated successfully! / ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"
        elif response.status_code == 401:
            return False, "‚ùå Invalid API key / API key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        elif response.status_code == 402:
            return True, "‚ö†Ô∏è API key valid but no credits / API key ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï"
        else:
            return False, f"‚ùå Error validating key / ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {response.status_code}"
    
    except requests.exceptions.Timeout:
        return False, "‚ùå Connection timeout / ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
    except Exception as e:
        return False, f"‚ùå Validation error / ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"


def render_api_key_form() -> bool:
    """Render bilingual API key configuration form."""
    st.info("üîê **Secure API Key Required / ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ API Key**")
    
    with st.form("api_key_form"):
        st.markdown("#### üîë Enter API Key / ‡πÉ‡∏™‡πà API Key")
        
        api_key_input = st.text_input(
            "OpenRouter API Key",
            type="password",
            placeholder="sk-or-v1-...",
            help="Your key is stored in memory only / ‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
        )
        
        col_submit, col_demo = st.columns(2)
        
        with col_submit:
            submit = st.form_submit_button("üîê Connect / ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", type="primary", use_container_width=True)
        
        with col_demo:
            demo = st.form_submit_button("üëÄ View Demo / ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", use_container_width=True)
        
        if submit and api_key_input:
            if api_key_input.startswith("sk-or-"):
                with st.spinner("üîç Validating API key / ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key..."):
                    is_valid, message = validate_openrouter_key(api_key_input)
                    
                    if is_valid:
                        st.session_state.openrouter_api_key = api_key_input
                        st.session_state.api_key_validated = True
                        st.success(message)
                        st.rerun()
                    else:
                        st.error(message)
            else:
                st.error("‚ùå Invalid key format / ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        if demo:
            st.session_state.demo_mode = True
            st.rerun()
    
    # Demo mode
    if st.session_state.get("demo_mode"):
        st.info("**üëÄ Demo Mode / ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á**")
        
        # English demo
        st.markdown("**English Example:**")
        with st.chat_message("user"):
            st.write("What is the optimal drilling depth for Dan Chang?")
        
        with st.chat_message("assistant"):
            st.write("""
            For Dan Chang District, the optimal drilling depth is 90-120m in eastern areas 
            and 120-150m in western areas, with success rates of 80-85%.
            """)
            st.caption("üá¨üáß English | üìö Sources: regional_geology.md")
        
        # Thai demo
        st.markdown("**Thai Example / ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢:**")
        with st.chat_message("user"):
            st.write("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡πÄ‡∏à‡∏≤‡∏∞‡∏ö‡πà‡∏≠‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πà‡∏≤‡∏ô‡∏ä‡πâ‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?")
        
        with st.chat_message("assistant"):
            st.write("""
            ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏î‡πà‡∏≤‡∏ô‡∏ä‡πâ‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡πÄ‡∏à‡∏≤‡∏∞‡∏ö‡πà‡∏≠‡∏Ñ‡∏∑‡∏≠ 90-120 ‡πÄ‡∏°‡∏ï‡∏£‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å 
            ‡πÅ‡∏•‡∏∞ 120-150 ‡πÄ‡∏°‡∏ï‡∏£‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à 80-85%
            """)
            st.caption("üáπüá≠ Thai / ‡πÑ‡∏ó‡∏¢ | üìö Sources / ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤: regional_geology.md")
        
        if st.button("üîô Back / ‡∏Å‡∏•‡∏±‡∏ö"):
            st.session_state.demo_mode = False
            st.rerun()
    
    return False


def render_ai_assistant(data: Dict) -> None:
    """
    Render the bilingual AI Assistant page.
    
    Args:
        data: Complete dashboard data
    """
    
    # Initialize session state
    if "openrouter_api_key" not in st.session_state:
        st.session_state.openrouter_api_key = None
    if "api_key_validated" not in st.session_state:
        st.session_state.api_key_validated = False
    if "preferred_language" not in st.session_state:
        st.session_state.preferred_language = None
    
    # Initialize knowledge base
    if "kb_manager" not in st.session_state:
        st.session_state.kb_manager = KnowledgeBaseManager()
        
        if not st.session_state.kb_manager.get_all_documents():
            with st.spinner("üìö Initializing knowledge base / ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ..."):
                st.session_state.kb_manager.create_sample_knowledge_base()
                indexed = st.session_state.kb_manager.index_directory(
                    st.session_state.kb_manager.docs_dir
                )
    
    kb = st.session_state.kb_manager
    
    # Render KB management in sidebar
    kb_ui = KnowledgeBaseUI(kb)
    kb_ui.render_management_panel()
    
    # Check if API key configured
    if not st.session_state.openrouter_api_key:
        render_api_key_form()
        return
    
    # Show API status in sidebar
    with st.sidebar:
        st.markdown("---")
        st.markdown("### üîê API Status / ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API")
        masked_key = st.session_state.openrouter_api_key[:15] + "..." + st.session_state.openrouter_api_key[-4:]
        st.success("‚úÖ Connected / ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
        st.caption(f"Key: {masked_key}")
        
        # Language selector
        st.markdown("---")
        st.markdown("### üåê Language / ‡∏†‡∏≤‡∏©‡∏≤")
        language_pref = st.selectbox(
            "Preference / ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
            options=["Auto Detect / ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", "English / ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "Thai / ‡πÑ‡∏ó‡∏¢"],
            key="language_selector"
        )
        
        if "English" in language_pref:
            st.session_state.preferred_language = "en"
        elif "Thai" in language_pref or "‡πÑ‡∏ó‡∏¢" in language_pref:
            st.session_state.preferred_language = "th"
        else:
            st.session_state.preferred_language = None
        
        if st.button("üîÑ Change Key / ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå", use_container_width=True):
            st.session_state.openrouter_api_key = None
            st.session_state.rag_chatbot = None
            st.rerun()
        
        if st.button("üö™ Disconnect / ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", use_container_width=True):
            st.session_state.openrouter_api_key = None
            st.session_state.rag_chat_history = []
            st.session_state.rag_chatbot = None
            st.rerun()
    
    # Initialize chatbot
    if "rag_chatbot" not in st.session_state:
        st.session_state.rag_chatbot = BilingualRAGChatbot(kb, st.session_state.openrouter_api_key)
        st.session_state.rag_chat_history = []
        st.session_state.rag_total_cost = 0.0
        st.session_state.rag_message_count = 0
    
    rag_bot = st.session_state.rag_chatbot
    
    # Dashboard stats
    st.markdown("---")
    col1, col2, col3, col4 = st.columns(4)
    docs = kb.get_all_documents()
    
    with col1:
        st.metric("üìö Documents / ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", len(docs))
    with col2:
        st.metric("üí¨ Messages / ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", st.session_state.rag_message_count)
    with col3:
        st.metric("üíµ Cost / ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", f"${st.session_state.rag_total_cost:.4f}")
    with col4:
        avg = st.session_state.rag_total_cost / max(st.session_state.rag_message_count, 1)
        st.metric("üìä Avg/Msg / ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"${avg:.5f}")
    
    st.markdown("---")
    
    # Settings and suggestions
    with st.expander("‚öôÔ∏è Settings & Suggestions / ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"):
        col_s, col_q = st.columns([1, 2])
        
        with col_s:
            n_context = st.slider("Context Docs / ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏ö‡∏ó", 1, 10, 3)
        
        with col_q:
            st.markdown("**üí° Try asking / ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°:**")
            
            # English questions
            st.markdown("**English:**")
            suggestions_en = [
                "What's the optimal drilling depth for Dan Chang?",
                "How much does a 120m well cost?",
                "When is the best season for drilling?",
            ]
            for i, q in enumerate(suggestions_en):
                if st.button(q, key=f"suggest_en_{i}", use_container_width=True):
                    st.session_state.suggested_q = q
                    st.rerun()
            
            # Thai questions
            st.markdown("**‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢:**")
            suggestions_th = [
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡πÄ‡∏à‡∏≤‡∏∞‡∏ö‡πà‡∏≠‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?",
                "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡πÄ‡∏à‡∏≤‡∏∞‡∏ö‡πà‡∏≠‡∏•‡∏∂‡∏Å 120 ‡πÄ‡∏°‡∏ï‡∏£‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?",
                "‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡πÑ‡∏´‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡πÄ‡∏à‡∏≤‡∏∞?",
            ]
            for i, q in enumerate(suggestions_th):
                if st.button(q, key=f"suggest_th_{i}", use_container_width=True):
                    st.session_state.suggested_q = q
                    st.rerun()
    
    # Chat display
    for msg in st.session_state.rag_chat_history:
        with st.chat_message(msg["role"]):
            st.write(msg["content"])
            if msg["role"] == "assistant":
                # Show metadata
                meta_parts = []
                
                if msg.get("sources"):
                    with st.expander("üìö Sources / ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤"):
                        for src in msg["sources"]:
                            st.caption(f"üìÑ {src}")
                
                if msg.get("cost", 0) > 0:
                    meta_parts.append(f"üíµ ${msg['cost']:.6f}")
                
                if msg.get("language"):
                    lang_label = "üáπüá≠ Thai / ‡πÑ‡∏ó‡∏¢" if msg["language"] == "th" else "üá¨üáß English / ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"
                    meta_parts.append(lang_label)
                
                if meta_parts:
                    st.caption(" | ".join(meta_parts))
    
    # Chat input
    user_input = st.session_state.pop("suggested_q", None) or st.chat_input(
        "Ask anything... / ‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ..."
    )
    
    if user_input:
        # User message
        with st.chat_message("user"):
            st.write(user_input)
        
        st.session_state.rag_chat_history.append({"role": "user", "content": user_input})
        
        # Get response
        with st.chat_message("assistant"):
            with st.spinner("üîç Searching... / ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."):
                result = rag_bot.chat_with_context(
                    user_input,
                    [{"role": msg["role"], "content": msg["content"]} 
                     for msg in st.session_state.rag_chat_history[:-1]],
                    n_context_docs=n_context if 'n_context' in locals() else 3,
                    force_language=st.session_state.preferred_language
                )
            
            st.write(result["response"])
            
            # Show metadata
            meta_parts = []
            
            if result.get("sources"):
                with st.expander("üìö Sources / ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤"):
                    for src in result["sources"]:
                        st.caption(f"üìÑ {src}")
            
            if result.get("cost", 0) > 0:
                meta_parts.append(f"üíµ ${result['cost']:.6f}")
            
            if result.get("language"):
                lang_label = "üáπüá≠ Thai / ‡πÑ‡∏ó‡∏¢" if result["language"] == "th" else "üá¨üáß English / ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"
                meta_parts.append(lang_label)
            
            if meta_parts:
                st.caption(" | ".join(meta_parts))
        
        # Add to history
        st.session_state.rag_chat_history.append({
            "role": "assistant",
            "content": result["response"],
            "sources": result.get("sources", []),
            "cost": result.get("cost", 0),
            "language": result.get("language", "en")
        })
        
        st.session_state.rag_message_count += 1
        st.session_state.rag_total_cost += result.get("cost", 0)
        st.rerun()
    
    # Welcome message
    if not st.session_state.rag_chat_history:
        st.info("""
        **üëã Welcome! I can help with: / ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏â‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:**
        
        **English:**
        - üèîÔ∏è Optimal drilling depths
        - üí∞ Cost estimation
        - üìã Best practices
        - üåç Regional geology
        
        **‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢:**
        - üèîÔ∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡πÄ‡∏à‡∏≤‡∏∞
        - üí∞ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
        - üìã ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏î‡∏µ
        - üåç ‡∏ò‡∏£‡∏ì‡∏µ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        """)
        
        st.markdown("---")
        st.markdown("**üéØ Language Detection / ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤:**")
        st.info("""
        The AI automatically detects your language and responds accordingly:
        - Type in **English** ‚Üí Get English response
        - ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏õ‡πá‡∏ô**‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢** ‚Üí ‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        
        You can also force a specific language using the dropdown in the sidebar.
        ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
        """)